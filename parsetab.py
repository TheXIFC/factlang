
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BREAK CONTINUE ELSE EQ_OP GE_OP ID IF LEFT_OP LE_OP NE_OP NUMBER POW RIGHT_OP WHILE\n    script : script_entity\n    | script script_entity\n    script_entity : statement\n    statement_list : statement\n    | statement_list statement\n    \n    compound_statement : '{' '}'\n    | '{' statement_list '}'\n    \n    primary_expression : value\n    unary_expression : primary_expression\n    exponential_expression : unary_expression\n    multiplicative_expression : exponential_expression\n    additive_expression : multiplicative_expression\n    shift_expression : additive_expression\n    relational_expression : shift_expression\n    equality_expression : relational_expression\n\n    assignment_expression : equality_expression\n    expression : assignment_expression\n    expression_statement : expression ';'\n    statement : expression_statement\n    statement : compound_statement\n    value : NUMBERvalue : IDprimary_expression : '(' expression ')'\n    unary_operator : '&'\n    | '*'\n    | '+'\n    | '-'\n    | '~'\n    | '!'\n    unary_expression : unary_operator primary_expressionexponential_expression : unary_expression POW exponential_expression\n    multiplicative_expression : multiplicative_expression '*' exponential_expression\n    | multiplicative_expression '/' exponential_expression\n    | multiplicative_expression '%' exponential_expression\n    \n    additive_expression : additive_expression '+' multiplicative_expression\n    | additive_expression '-' multiplicative_expression\n    \n    shift_expression : shift_expression LEFT_OP additive_expression\n    | shift_expression RIGHT_OP additive_expression\n    \n    relational_expression : relational_expression '<' shift_expression\n    | relational_expression '>' shift_expression\n    | relational_expression LE_OP shift_expression\n    | relational_expression GE_OP shift_expression\n    \n    equality_expression : equality_expression EQ_OP relational_expression\n    | equality_expression NE_OP relational_expression\n    assignment_operator : '='assignment_expression : unary_expression assignment_operator assignment_expression\n    statement : IF '(' expression ')' statement\n    | IF '(' expression ')' statement ELSE statement\n    statement : WHILE '(' expression ')' statementstatement : CONTINUE ';'statement : BREAK ';'empty :"
    
_lr_action_items = {'IF':([0,1,2,3,4,5,12,32,35,37,38,39,40,41,62,63,80,81,82,83,84,85,],[6,6,-1,-3,-19,-20,6,-2,-18,-50,-51,-6,6,-4,-7,-5,6,6,-47,-49,6,-48,]),'WHILE':([0,1,2,3,4,5,12,32,35,37,38,39,40,41,62,63,80,81,82,83,84,85,],[9,9,-1,-3,-19,-20,9,-2,-18,-50,-51,-6,9,-4,-7,-5,9,9,-47,-49,9,-48,]),'CONTINUE':([0,1,2,3,4,5,12,32,35,37,38,39,40,41,62,63,80,81,82,83,84,85,],[10,10,-1,-3,-19,-20,10,-2,-18,-50,-51,-6,10,-4,-7,-5,10,10,-47,-49,10,-48,]),'BREAK':([0,1,2,3,4,5,12,32,35,37,38,39,40,41,62,63,80,81,82,83,84,85,],[11,11,-1,-3,-19,-20,11,-2,-18,-50,-51,-6,11,-4,-7,-5,11,11,-47,-49,11,-48,]),'{':([0,1,2,3,4,5,12,32,35,37,38,39,40,41,62,63,80,81,82,83,84,85,],[12,12,-1,-3,-19,-20,12,-2,-18,-50,-51,-6,12,-4,-7,-5,12,12,-47,-49,12,-48,]),'(':([0,1,2,3,4,5,6,7,9,12,18,21,22,23,24,25,26,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,62,63,80,81,82,83,84,85,],[7,7,-1,-3,-19,-20,33,7,36,7,7,-24,-25,-26,-27,-28,-29,-2,7,-18,7,-50,-51,-6,7,-4,7,7,7,7,-45,7,7,7,7,7,7,7,7,7,7,7,-7,-5,7,7,-47,-49,7,-48,]),'&':([0,1,2,3,4,5,7,12,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,62,63,80,81,82,83,84,85,],[21,21,-1,-3,-19,-20,21,21,-2,21,-18,21,-50,-51,-6,21,-4,21,21,21,21,-45,21,21,21,21,21,21,21,21,21,21,21,-7,-5,21,21,-47,-49,21,-48,]),'*':([0,1,2,3,4,5,7,12,15,17,20,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,65,68,75,76,77,78,79,80,81,82,83,84,85,],[22,22,-1,-3,-19,-20,22,22,-10,-9,-8,-21,-22,56,-11,-2,22,-18,22,-50,-51,-6,22,-4,22,22,22,22,-45,22,22,22,22,-30,22,22,22,22,22,22,22,-23,-7,-5,-10,-31,56,56,-32,-33,-34,22,22,-47,-49,22,-48,]),'+':([0,1,2,3,4,5,7,12,15,17,20,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,65,68,73,74,75,76,77,78,79,80,81,82,83,84,85,],[23,23,-1,-3,-19,-20,23,23,-10,-9,-8,54,-21,-22,-12,-11,-2,23,-18,23,-50,-51,-6,23,-4,23,23,23,23,-45,23,23,23,23,-30,23,23,23,23,23,23,23,-23,-7,-5,-10,-31,54,54,-35,-36,-32,-33,-34,23,23,-47,-49,23,-48,]),'-':([0,1,2,3,4,5,7,12,15,17,20,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,63,65,68,73,74,75,76,77,78,79,80,81,82,83,84,85,],[24,24,-1,-3,-19,-20,24,24,-10,-9,-8,55,-21,-22,-12,-11,-2,24,-18,24,-50,-51,-6,24,-4,24,24,24,24,-45,24,24,24,24,-30,24,24,24,24,24,24,24,-23,-7,-5,-10,-31,55,55,-35,-36,-32,-33,-34,24,24,-47,-49,24,-48,]),'~':([0,1,2,3,4,5,7,12,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,62,63,80,81,82,83,84,85,],[25,25,-1,-3,-19,-20,25,25,-2,25,-18,25,-50,-51,-6,25,-4,25,25,25,25,-45,25,25,25,25,25,25,25,25,25,25,25,-7,-5,25,25,-47,-49,25,-48,]),'!':([0,1,2,3,4,5,7,12,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,62,63,80,81,82,83,84,85,],[26,26,-1,-3,-19,-20,26,26,-2,26,-18,26,-50,-51,-6,26,-4,26,26,26,26,-45,26,26,26,26,26,26,26,26,26,26,26,-7,-5,26,26,-47,-49,26,-48,]),'NUMBER':([0,1,2,3,4,5,7,12,18,21,22,23,24,25,26,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,62,63,80,81,82,83,84,85,],[28,28,-1,-3,-19,-20,28,28,28,-24,-25,-26,-27,-28,-29,-2,28,-18,28,-50,-51,-6,28,-4,28,28,28,28,-45,28,28,28,28,28,28,28,28,28,28,28,-7,-5,28,28,-47,-49,28,-48,]),'ID':([0,1,2,3,4,5,7,12,18,21,22,23,24,25,26,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,62,63,80,81,82,83,84,85,],[29,29,-1,-3,-19,-20,29,29,29,-24,-25,-26,-27,-28,-29,-2,29,-18,29,-50,-51,-6,29,-4,29,29,29,29,-45,29,29,29,29,29,29,29,29,29,29,29,-7,-5,29,29,-47,-49,29,-48,]),'$end':([1,2,3,4,5,32,35,37,38,39,62,82,83,85,],[0,-1,-3,-19,-20,-2,-18,-50,-51,-6,-7,-47,-49,-48,]),'}':([4,5,12,35,37,38,39,40,41,62,63,82,83,85,],[-19,-20,39,-18,-50,-51,-6,62,-4,-7,-5,-47,-49,-48,]),'ELSE':([4,5,35,37,38,39,62,82,83,85,],[-19,-20,-18,-50,-51,-6,-7,84,-49,-48,]),';':([8,10,11,13,14,15,16,17,19,20,27,28,29,30,31,51,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[35,37,38,-17,-16,-10,-15,-9,-14,-8,-13,-21,-22,-12,-11,-30,-23,-43,-10,-44,-46,-31,-39,-40,-41,-42,-37,-38,-35,-36,-32,-33,-34,]),')':([13,14,15,16,17,19,20,27,28,29,30,31,34,51,59,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,],[-17,-16,-10,-15,-9,-14,-8,-13,-21,-22,-12,-11,60,-30,80,-23,81,-43,-10,-44,-46,-31,-39,-40,-41,-42,-37,-38,-35,-36,-32,-33,-34,]),'EQ_OP':([14,15,16,17,19,20,27,28,29,30,31,51,60,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,],[42,-10,-15,-9,-14,-8,-13,-21,-22,-12,-11,-30,-23,-43,-10,-44,-31,-39,-40,-41,-42,-37,-38,-35,-36,-32,-33,-34,]),'NE_OP':([14,15,16,17,19,20,27,28,29,30,31,51,60,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,],[43,-10,-15,-9,-14,-8,-13,-21,-22,-12,-11,-30,-23,-43,-10,-44,-31,-39,-40,-41,-42,-37,-38,-35,-36,-32,-33,-34,]),'/':([15,17,20,28,29,30,31,51,60,65,68,75,76,77,78,79,],[-10,-9,-8,-21,-22,57,-11,-30,-23,-10,-31,57,57,-32,-33,-34,]),'%':([15,17,20,28,29,30,31,51,60,65,68,75,76,77,78,79,],[-10,-9,-8,-21,-22,58,-11,-30,-23,-10,-31,58,58,-32,-33,-34,]),'LEFT_OP':([15,17,19,20,27,28,29,30,31,51,60,65,68,69,70,71,72,73,74,75,76,77,78,79,],[-10,-9,52,-8,-13,-21,-22,-12,-11,-30,-23,-10,-31,52,52,52,52,-37,-38,-35,-36,-32,-33,-34,]),'RIGHT_OP':([15,17,19,20,27,28,29,30,31,51,60,65,68,69,70,71,72,73,74,75,76,77,78,79,],[-10,-9,53,-8,-13,-21,-22,-12,-11,-30,-23,-10,-31,53,53,53,53,-37,-38,-35,-36,-32,-33,-34,]),'<':([15,16,17,19,20,27,28,29,30,31,51,60,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,],[-10,47,-9,-14,-8,-13,-21,-22,-12,-11,-30,-23,47,-10,47,-31,-39,-40,-41,-42,-37,-38,-35,-36,-32,-33,-34,]),'>':([15,16,17,19,20,27,28,29,30,31,51,60,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,],[-10,48,-9,-14,-8,-13,-21,-22,-12,-11,-30,-23,48,-10,48,-31,-39,-40,-41,-42,-37,-38,-35,-36,-32,-33,-34,]),'LE_OP':([15,16,17,19,20,27,28,29,30,31,51,60,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,],[-10,49,-9,-14,-8,-13,-21,-22,-12,-11,-30,-23,49,-10,49,-31,-39,-40,-41,-42,-37,-38,-35,-36,-32,-33,-34,]),'GE_OP':([15,16,17,19,20,27,28,29,30,31,51,60,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,],[-10,50,-9,-14,-8,-13,-21,-22,-12,-11,-30,-23,50,-10,50,-31,-39,-40,-41,-42,-37,-38,-35,-36,-32,-33,-34,]),'POW':([15,17,20,28,29,51,60,65,],[45,-9,-8,-21,-22,-30,-23,45,]),'=':([15,17,20,28,29,51,60,],[46,-9,-8,-21,-22,-30,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'script':([0,],[1,]),'script_entity':([0,1,],[2,32,]),'statement':([0,1,12,40,80,81,84,],[3,3,41,63,82,83,85,]),'expression_statement':([0,1,12,40,80,81,84,],[4,4,4,4,4,4,4,]),'compound_statement':([0,1,12,40,80,81,84,],[5,5,5,5,5,5,5,]),'expression':([0,1,7,12,33,36,40,80,81,84,],[8,8,34,8,59,61,8,8,8,8,]),'assignment_expression':([0,1,7,12,33,36,40,44,80,81,84,],[13,13,13,13,13,13,13,67,13,13,13,]),'equality_expression':([0,1,7,12,33,36,40,44,80,81,84,],[14,14,14,14,14,14,14,14,14,14,14,]),'unary_expression':([0,1,7,12,33,36,40,42,43,44,45,47,48,49,50,52,53,54,55,56,57,58,80,81,84,],[15,15,15,15,15,15,15,65,65,15,65,65,65,65,65,65,65,65,65,65,65,65,15,15,15,]),'relational_expression':([0,1,7,12,33,36,40,42,43,44,80,81,84,],[16,16,16,16,16,16,16,64,66,16,16,16,16,]),'primary_expression':([0,1,7,12,18,33,36,40,42,43,44,45,47,48,49,50,52,53,54,55,56,57,58,80,81,84,],[17,17,17,17,51,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'unary_operator':([0,1,7,12,33,36,40,42,43,44,45,47,48,49,50,52,53,54,55,56,57,58,80,81,84,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'shift_expression':([0,1,7,12,33,36,40,42,43,44,47,48,49,50,80,81,84,],[19,19,19,19,19,19,19,19,19,19,69,70,71,72,19,19,19,]),'value':([0,1,7,12,18,33,36,40,42,43,44,45,47,48,49,50,52,53,54,55,56,57,58,80,81,84,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'additive_expression':([0,1,7,12,33,36,40,42,43,44,47,48,49,50,52,53,80,81,84,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,73,74,27,27,27,]),'multiplicative_expression':([0,1,7,12,33,36,40,42,43,44,47,48,49,50,52,53,54,55,80,81,84,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,75,76,30,30,30,]),'exponential_expression':([0,1,7,12,33,36,40,42,43,44,45,47,48,49,50,52,53,54,55,56,57,58,80,81,84,],[31,31,31,31,31,31,31,31,31,31,68,31,31,31,31,31,31,31,31,77,78,79,31,31,31,]),'statement_list':([12,],[40,]),'assignment_operator':([15,],[44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> script","S'",1,None,None,None),
  ('script -> script_entity','script',1,'p_script','grammar.py',33),
  ('script -> script script_entity','script',2,'p_script','grammar.py',34),
  ('script_entity -> statement','script_entity',1,'p_script_entity','grammar.py',44),
  ('statement_list -> statement','statement_list',1,'p_statement_list','grammar.py',50),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','grammar.py',51),
  ('compound_statement -> { }','compound_statement',2,'p_compound_statement','grammar.py',63),
  ('compound_statement -> { statement_list }','compound_statement',3,'p_compound_statement','grammar.py',64),
  ('primary_expression -> value','primary_expression',1,'p_unit_exp','grammar.py',74),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unit_exp','grammar.py',75),
  ('exponential_expression -> unary_expression','exponential_expression',1,'p_unit_exp','grammar.py',76),
  ('multiplicative_expression -> exponential_expression','multiplicative_expression',1,'p_unit_exp','grammar.py',77),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_unit_exp','grammar.py',78),
  ('shift_expression -> additive_expression','shift_expression',1,'p_unit_exp','grammar.py',79),
  ('relational_expression -> shift_expression','relational_expression',1,'p_unit_exp','grammar.py',80),
  ('equality_expression -> relational_expression','equality_expression',1,'p_unit_exp','grammar.py',81),
  ('assignment_expression -> equality_expression','assignment_expression',1,'p_unit_exp','grammar.py',83),
  ('expression -> assignment_expression','expression',1,'p_unit_exp','grammar.py',84),
  ('expression_statement -> expression ;','expression_statement',2,'p_unit_exp','grammar.py',85),
  ('statement -> expression_statement','statement',1,'p_unit_exp','grammar.py',86),
  ('statement -> compound_statement','statement',1,'p_unit_exp','grammar.py',87),
  ('value -> NUMBER','value',1,'p_expression_num','grammar.py',93),
  ('value -> ID','value',1,'p_expression_id','grammar.py',98),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_exp','grammar.py',103),
  ('unary_operator -> &','unary_operator',1,'p_unary_op','grammar.py',109),
  ('unary_operator -> *','unary_operator',1,'p_unary_op','grammar.py',110),
  ('unary_operator -> +','unary_operator',1,'p_unary_op','grammar.py',111),
  ('unary_operator -> -','unary_operator',1,'p_unary_op','grammar.py',112),
  ('unary_operator -> ~','unary_operator',1,'p_unary_op','grammar.py',113),
  ('unary_operator -> !','unary_operator',1,'p_unary_op','grammar.py',114),
  ('unary_expression -> unary_operator primary_expression','unary_expression',2,'p_unary_exp','grammar.py',120),
  ('exponential_expression -> unary_expression POW exponential_expression','exponential_expression',3,'p_exponential_exp','grammar.py',125),
  ('multiplicative_expression -> multiplicative_expression * exponential_expression','multiplicative_expression',3,'p_multiplicative_exp','grammar.py',131),
  ('multiplicative_expression -> multiplicative_expression / exponential_expression','multiplicative_expression',3,'p_multiplicative_exp','grammar.py',132),
  ('multiplicative_expression -> multiplicative_expression % exponential_expression','multiplicative_expression',3,'p_multiplicative_exp','grammar.py',133),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_exp','grammar.py',140),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_exp','grammar.py',141),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_exp','grammar.py',148),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_exp','grammar.py',149),
  ('relational_expression -> relational_expression < shift_expression','relational_expression',3,'p_relational_exp','grammar.py',156),
  ('relational_expression -> relational_expression > shift_expression','relational_expression',3,'p_relational_exp','grammar.py',157),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_exp','grammar.py',158),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_exp','grammar.py',159),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_exp','grammar.py',166),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_exp','grammar.py',167),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_op','grammar.py',173),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_exp','grammar.py',188),
  ('statement -> IF ( expression ) statement','statement',5,'p_if_statement','grammar.py',194),
  ('statement -> IF ( expression ) statement ELSE statement','statement',7,'p_if_statement','grammar.py',195),
  ('statement -> WHILE ( expression ) statement','statement',5,'p_while_statement','grammar.py',204),
  ('statement -> CONTINUE ;','statement',2,'p_continue_statement','grammar.py',209),
  ('statement -> BREAK ;','statement',2,'p_break_statement','grammar.py',214),
  ('empty -> <empty>','empty',0,'p_empty','grammar.py',219),
]
